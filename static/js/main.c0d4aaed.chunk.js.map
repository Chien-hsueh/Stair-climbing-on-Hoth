{"version":3,"sources":["components/Footer.tsx","App.js","util.js","reportWebVitals.js","index.js"],"names":["Footer","userInput","numWays","Typography","variant","className","App","useState","setNumWays","setUserInput","buttonClicked","setButtonClicked","handleChange","e","Number","current","minusTwo","minusOne","i","calculateClimb","target","value","Button","color","onClick","TextField","id","label","type","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAuBeA,EAdA,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,QAExB,OAAID,GAAaA,GAAY,EACjB,eAACE,EAAA,EAAD,CAAYC,QAAQ,KAApB,sCAAkD,sBAAMC,UAAU,SAAhB,SAA0BH,IAA5E,qBAEHD,GAAaA,EAAW,EACrB,cAACE,EAAA,EAAD,CAAYC,QAAQ,KAApB,qEAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,KAApB,qB,gBCgCDE,EAxCH,WAAO,IAAD,EACcC,mBAAS,GADvB,mBACTL,EADS,KACAM,EADA,OAEkBD,mBAAS,GAF3B,mBAETN,EAFS,KAEEQ,EAFF,OAG0BF,oBAAS,GAHnC,mBAGTG,EAHS,KAGMC,EAHN,KAMVC,EAAc,SAACC,GACnBL,ECjB0B,SAACP,GAI3B,GAAkB,MAFlBA,EAAYa,OAAOb,IAEG,OAAO,EAE7B,GAAkB,IAAdA,EAAkB,OAAO,EAC7B,GAAkB,IAAdA,EAAkB,OAAO,EAC7B,GAAkB,IAAdA,EAAkB,OAAO,EAM7B,IAJA,IAEIc,EAFAC,EAAW,EACXC,EAAW,EAGNC,EAAG,EAAGA,GAAKjB,EAAWiB,IAC/BH,EAAUC,EAAWC,EACrBD,EAAWC,EACXA,EAAWF,EAGX,OAAOA,EDHII,CAAeN,EAAEO,OAAOC,QACnCZ,EAAaI,EAAEO,OAAOC,QAGxB,OACE,qBAAKhB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEA,sBAAKA,UAAU,QAAf,UACA,cAACF,EAAA,EAAD,CAAYC,QAAQ,KAApB,udAGE,cAACkB,EAAA,EAAD,CAAQlB,QAAQ,YAAYmB,MAAM,UAAUC,QAAS,kBAAMb,GAAiB,IAA5E,oCAGDD,GAAiB,cAACe,EAAA,EAAD,CACdC,GAAG,aACHC,MAAM,wBACNC,KAAK,SACLxB,QAAQ,WACRyB,SAAU,SAAChB,GAAOD,EAAaC,MAGnC,qBAAKR,UAAU,QAAf,SACA,cAAC,EAAD,CAAQJ,UAAWA,EAAWC,QAASA,YE7B9B4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c0d4aaed.chunk.js","sourcesContent":["import { Typography } from '@material-ui/core';\r\nimport '../App.css';\r\nimport React from 'react';\r\n\r\ntype FooterProps ={\r\n    userInput: Number,\r\n    numWays: Number\r\n}\r\n\r\nconst Footer = ({userInput, numWays}: FooterProps) =>{\r\n \r\n    if (userInput && userInput >=0){\r\n        return (<Typography variant=\"h5\">You can reach the top in <span className=\"answer\">{numWays}</span> distinct ways.</Typography>)\r\n    }\r\n    else if (userInput && userInput <0){\r\n        return (<Typography variant=\"h5\">You cannot reach the top with negative number of steps.</Typography>)\r\n    }\r\n    else{\r\n        return (<Typography variant=\"h5\">⠀</Typography>)\r\n    }\r\n\r\n}\r\n\r\nexport default Footer;","import './App.css';\n\nimport {calculateClimb} from './util'\nimport Footer from './components/Footer'\n\nimport {Button, TextField, Typography} from '@material-ui/core';\n\nimport React, { useState } from 'react';\n\n\nconst App = () => {\n  const [numWays, setNumWays] = useState(0)\n  const [userInput, setUserInput] = useState(0)\n  const [buttonClicked, setButtonClicked] = useState(false)\n\n\n  const handleChange= (e) => {\n    setNumWays(calculateClimb(e.target.value))\n    setUserInput(e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      <div className=\"intro\"> \n      <Typography variant=\"h5\">You're a rebel scout on the ice planet, Hoth. While killing time waiting for the Empire to find your base, you ride your trusty Tauntaun around the plant. You wander upon a very tall ice staircase leading up a mountainside that takes n steps to reach. Having plenty of time on your hands, you decide you want to figure out\nhow many ways are there to reach the top. The catch is that for each step, your Tauntauan can only climb 1 or 2 steps at a given time.</Typography>\n      \n        <Button variant=\"contained\" color=\"primary\" onClick={() => setButtonClicked(true)}>▽ Start ▽</Button>\n      </div>\n\n      {buttonClicked && <TextField\n          id=\"step-input\"\n          label=\"Enter number of steps\"\n          type=\"number\"\n          variant=\"outlined\"\n          onChange={(e) => {handleChange(e)} }\n        />}\n      \n      <div className=\"footr\">\n      <Footer userInput={userInput} numWays={numWays}/>\n      </div>\n\n      </header>\n           \n    </div>\n  );\n}\n\nexport default App;\n","export const calculateClimb = (userInput) => {\r\n    \r\n    userInput = Number(userInput)\r\n    \r\n    if (userInput === '') return 0;\r\n\r\n    if (userInput === 0) {return 0;}\r\n    if (userInput === 1) {return 1;}\r\n    if (userInput === 2) {return 2;}\r\n\r\n    let minusTwo = 1\r\n    let minusOne = 2\r\n    let current\r\n\r\n    for (let i= 3; i <= userInput; i++){\r\n    current = minusTwo + minusOne\r\n    minusTwo = minusOne\r\n    minusOne = current\r\n    }\r\n\r\n    return current\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}